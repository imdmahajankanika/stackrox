// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/suite"
)

type UsagesStoreSuite struct {
	suite.Suite
	store  Store
	testDB *pgtest.TestPostgres
}

func TestUsagesStore(t *testing.T) {
	suite.Run(t, new(UsagesStoreSuite))
}

func (s *UsagesStoreSuite) SetupSuite() {

	s.testDB = pgtest.ForT(s.T())
	s.store = New(s.testDB.DB)
}

func (s *UsagesStoreSuite) SetupTest() {
	ctx := sac.WithAllAccess(context.Background())
	tag, err := s.testDB.Exec(ctx, "TRUNCATE usages CASCADE")
	s.T().Log("usages", tag)
	s.NoError(err)
}

func (s *UsagesStoreSuite) TearDownSuite() {
	s.testDB.Teardown(s.T())
}

func (s *UsagesStoreSuite) TestStore() {
	ctx := sac.WithAllAccess(context.Background())

	store := s.store

	usage := &storage.Usage{}
	s.NoError(testutils.FullInit(usage, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundUsage, exists, err := store.Get(ctx, usage.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundUsage)

	withNoAccessCtx := sac.WithNoAccess(ctx)

	s.NoError(store.Upsert(ctx, usage))
	foundUsage, exists, err = store.Get(ctx, usage.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(usage, foundUsage)

	usageCount, err := store.Count(ctx)
	s.NoError(err)
	s.Equal(1, usageCount)
	usageCount, err = store.Count(withNoAccessCtx)
	s.NoError(err)
	s.Zero(usageCount)

	usageExists, err := store.Exists(ctx, usage.GetId())
	s.NoError(err)
	s.True(usageExists)
	s.NoError(store.Upsert(ctx, usage))
	s.ErrorIs(store.Upsert(withNoAccessCtx, usage), sac.ErrResourceAccessDenied)

	foundUsage, exists, err = store.Get(ctx, usage.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(usage, foundUsage)

	s.NoError(store.Delete(ctx, usage.GetId()))
	foundUsage, exists, err = store.Get(ctx, usage.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundUsage)
	s.ErrorIs(store.Delete(withNoAccessCtx, usage.GetId()), sac.ErrResourceAccessDenied)

	var usages []*storage.Usage
	var usageIDs []string
	for i := 0; i < 200; i++ {
		usage := &storage.Usage{}
		s.NoError(testutils.FullInit(usage, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
		usages = append(usages, usage)
		usageIDs = append(usageIDs, usage.GetId())
	}

	s.NoError(store.UpsertMany(ctx, usages))

	usageCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(200, usageCount)

	s.NoError(store.DeleteMany(ctx, usageIDs))

	usageCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(0, usageCount)
}
