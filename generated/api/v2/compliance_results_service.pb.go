// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v2/compliance_results_service.proto

package v2

import (
	context "context"
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ComplianceScanResult_CheckStatus int32

const (
	ComplianceScanResult_UNSET          ComplianceScanResult_CheckStatus = 0
	ComplianceScanResult_PASS           ComplianceScanResult_CheckStatus = 1
	ComplianceScanResult_FAIL           ComplianceScanResult_CheckStatus = 2
	ComplianceScanResult_ERROR          ComplianceScanResult_CheckStatus = 3
	ComplianceScanResult_INFO           ComplianceScanResult_CheckStatus = 4
	ComplianceScanResult_MANUAL         ComplianceScanResult_CheckStatus = 5
	ComplianceScanResult_NOT_APPLICABLE ComplianceScanResult_CheckStatus = 6
	ComplianceScanResult_INCONSISTENT   ComplianceScanResult_CheckStatus = 7
)

var ComplianceScanResult_CheckStatus_name = map[int32]string{
	0: "UNSET",
	1: "PASS",
	2: "FAIL",
	3: "ERROR",
	4: "INFO",
	5: "MANUAL",
	6: "NOT_APPLICABLE",
	7: "INCONSISTENT",
}

var ComplianceScanResult_CheckStatus_value = map[string]int32{
	"UNSET":          0,
	"PASS":           1,
	"FAIL":           2,
	"ERROR":          3,
	"INFO":           4,
	"MANUAL":         5,
	"NOT_APPLICABLE": 6,
	"INCONSISTENT":   7,
}

func (x ComplianceScanResult_CheckStatus) String() string {
	return proto.EnumName(ComplianceScanResult_CheckStatus_name, int32(x))
}

func (ComplianceScanResult_CheckStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fb98f7f6563d14bb, []int{0, 0}
}

type ComplianceScanResult struct {
	Id                   string                           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CheckId              string                           `protobuf:"bytes,2,opt,name=check_id,json=checkId,proto3" json:"check_id,omitempty"`
	CheckName            string                           `protobuf:"bytes,3,opt,name=check_name,json=checkName,proto3" json:"check_name,omitempty"`
	ClusterId            string                           `protobuf:"bytes,4,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Status               ComplianceScanResult_CheckStatus `protobuf:"varint,5,opt,name=status,proto3,enum=v2.ComplianceScanResult_CheckStatus" json:"status,omitempty"`
	Severity             string                           `protobuf:"bytes,6,opt,name=severity,proto3" json:"severity,omitempty"`
	Description          string                           `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Instructions         string                           `protobuf:"bytes,8,opt,name=instructions,proto3" json:"instructions,omitempty"`
	Labels               map[string]string                `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations          map[string]string                `protobuf:"bytes,10,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreatedTime          *types.Timestamp                 `protobuf:"bytes,11,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	Standard             string                           `protobuf:"bytes,12,opt,name=standard,proto3" json:"standard,omitempty"`
	Control              string                           `protobuf:"bytes,13,opt,name=control,proto3" json:"control,omitempty"`
	ScanName             string                           `protobuf:"bytes,14,opt,name=scan_name,json=scanName,proto3" json:"scan_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *ComplianceScanResult) Reset()         { *m = ComplianceScanResult{} }
func (m *ComplianceScanResult) String() string { return proto.CompactTextString(m) }
func (*ComplianceScanResult) ProtoMessage()    {}
func (*ComplianceScanResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb98f7f6563d14bb, []int{0}
}
func (m *ComplianceScanResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceScanResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceScanResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceScanResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceScanResult.Merge(m, src)
}
func (m *ComplianceScanResult) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceScanResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceScanResult.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceScanResult proto.InternalMessageInfo

func (m *ComplianceScanResult) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ComplianceScanResult) GetCheckId() string {
	if m != nil {
		return m.CheckId
	}
	return ""
}

func (m *ComplianceScanResult) GetCheckName() string {
	if m != nil {
		return m.CheckName
	}
	return ""
}

func (m *ComplianceScanResult) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ComplianceScanResult) GetStatus() ComplianceScanResult_CheckStatus {
	if m != nil {
		return m.Status
	}
	return ComplianceScanResult_UNSET
}

func (m *ComplianceScanResult) GetSeverity() string {
	if m != nil {
		return m.Severity
	}
	return ""
}

func (m *ComplianceScanResult) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ComplianceScanResult) GetInstructions() string {
	if m != nil {
		return m.Instructions
	}
	return ""
}

func (m *ComplianceScanResult) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ComplianceScanResult) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *ComplianceScanResult) GetCreatedTime() *types.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

func (m *ComplianceScanResult) GetStandard() string {
	if m != nil {
		return m.Standard
	}
	return ""
}

func (m *ComplianceScanResult) GetControl() string {
	if m != nil {
		return m.Control
	}
	return ""
}

func (m *ComplianceScanResult) GetScanName() string {
	if m != nil {
		return m.ScanName
	}
	return ""
}

func (m *ComplianceScanResult) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceScanResult) Clone() *ComplianceScanResult {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceScanResult)
	*cloned = *m

	if m.Labels != nil {
		cloned.Labels = make(map[string]string, len(m.Labels))
		for k, v := range m.Labels {
			cloned.Labels[k] = v
		}
	}
	if m.Annotations != nil {
		cloned.Annotations = make(map[string]string, len(m.Annotations))
		for k, v := range m.Annotations {
			cloned.Annotations[k] = v
		}
	}
	cloned.CreatedTime = m.CreatedTime.Clone()
	return cloned
}

type ComplianceScanResultsRequest struct {
	ScanName             string   `protobuf:"bytes,1,opt,name=scan_name,json=scanName,proto3" json:"scan_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComplianceScanResultsRequest) Reset()         { *m = ComplianceScanResultsRequest{} }
func (m *ComplianceScanResultsRequest) String() string { return proto.CompactTextString(m) }
func (*ComplianceScanResultsRequest) ProtoMessage()    {}
func (*ComplianceScanResultsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb98f7f6563d14bb, []int{1}
}
func (m *ComplianceScanResultsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceScanResultsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceScanResultsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceScanResultsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceScanResultsRequest.Merge(m, src)
}
func (m *ComplianceScanResultsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceScanResultsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceScanResultsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceScanResultsRequest proto.InternalMessageInfo

func (m *ComplianceScanResultsRequest) GetScanName() string {
	if m != nil {
		return m.ScanName
	}
	return ""
}

func (m *ComplianceScanResultsRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceScanResultsRequest) Clone() *ComplianceScanResultsRequest {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceScanResultsRequest)
	*cloned = *m

	return cloned
}

type ComplianceClusterScanResultsRequest struct {
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComplianceClusterScanResultsRequest) Reset()         { *m = ComplianceClusterScanResultsRequest{} }
func (m *ComplianceClusterScanResultsRequest) String() string { return proto.CompactTextString(m) }
func (*ComplianceClusterScanResultsRequest) ProtoMessage()    {}
func (*ComplianceClusterScanResultsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb98f7f6563d14bb, []int{2}
}
func (m *ComplianceClusterScanResultsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceClusterScanResultsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceClusterScanResultsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceClusterScanResultsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceClusterScanResultsRequest.Merge(m, src)
}
func (m *ComplianceClusterScanResultsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceClusterScanResultsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceClusterScanResultsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceClusterScanResultsRequest proto.InternalMessageInfo

func (m *ComplianceClusterScanResultsRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ComplianceClusterScanResultsRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceClusterScanResultsRequest) Clone() *ComplianceClusterScanResultsRequest {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceClusterScanResultsRequest)
	*cloned = *m

	return cloned
}

type ListComplianceScanResultsResponse struct {
	ScanResults          []*ComplianceScanResult `protobuf:"bytes,1,rep,name=scan_results,json=scanResults,proto3" json:"scan_results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ListComplianceScanResultsResponse) Reset()         { *m = ListComplianceScanResultsResponse{} }
func (m *ListComplianceScanResultsResponse) String() string { return proto.CompactTextString(m) }
func (*ListComplianceScanResultsResponse) ProtoMessage()    {}
func (*ListComplianceScanResultsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb98f7f6563d14bb, []int{3}
}
func (m *ListComplianceScanResultsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListComplianceScanResultsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListComplianceScanResultsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListComplianceScanResultsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListComplianceScanResultsResponse.Merge(m, src)
}
func (m *ListComplianceScanResultsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListComplianceScanResultsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListComplianceScanResultsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListComplianceScanResultsResponse proto.InternalMessageInfo

func (m *ListComplianceScanResultsResponse) GetScanResults() []*ComplianceScanResult {
	if m != nil {
		return m.ScanResults
	}
	return nil
}

func (m *ListComplianceScanResultsResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListComplianceScanResultsResponse) Clone() *ListComplianceScanResultsResponse {
	if m == nil {
		return nil
	}
	cloned := new(ListComplianceScanResultsResponse)
	*cloned = *m

	if m.ScanResults != nil {
		cloned.ScanResults = make([]*ComplianceScanResult, len(m.ScanResults))
		for idx, v := range m.ScanResults {
			cloned.ScanResults[idx] = v.Clone()
		}
	}
	return cloned
}

func init() {
	proto.RegisterEnum("v2.ComplianceScanResult_CheckStatus", ComplianceScanResult_CheckStatus_name, ComplianceScanResult_CheckStatus_value)
	proto.RegisterType((*ComplianceScanResult)(nil), "v2.ComplianceScanResult")
	proto.RegisterMapType((map[string]string)(nil), "v2.ComplianceScanResult.AnnotationsEntry")
	proto.RegisterMapType((map[string]string)(nil), "v2.ComplianceScanResult.LabelsEntry")
	proto.RegisterType((*ComplianceScanResultsRequest)(nil), "v2.ComplianceScanResultsRequest")
	proto.RegisterType((*ComplianceClusterScanResultsRequest)(nil), "v2.ComplianceClusterScanResultsRequest")
	proto.RegisterType((*ListComplianceScanResultsResponse)(nil), "v2.ListComplianceScanResultsResponse")
}

func init() {
	proto.RegisterFile("api/v2/compliance_results_service.proto", fileDescriptor_fb98f7f6563d14bb)
}

var fileDescriptor_fb98f7f6563d14bb = []byte{
	// 773 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x5e, 0x3b, 0xcd, 0xdf, 0x71, 0x88, 0xac, 0x61, 0x2f, 0x66, 0xb3, 0xbb, 0xd9, 0x90, 0x05,
	0x35, 0x7b, 0x63, 0x23, 0x73, 0x53, 0x28, 0x20, 0xa5, 0x21, 0x45, 0x11, 0xc1, 0xa9, 0xec, 0x54,
	0x42, 0xdc, 0x84, 0xa9, 0x3d, 0x14, 0xab, 0x8e, 0x6d, 0x3c, 0x13, 0x8b, 0xa8, 0xea, 0x0d, 0xaf,
	0x00, 0x17, 0xbc, 0x03, 0x3c, 0x08, 0x97, 0x48, 0x7d, 0x01, 0x54, 0x78, 0x10, 0xe4, 0xf1, 0xb4,
	0x49, 0xaa, 0x26, 0x6c, 0xef, 0xe6, 0x7c, 0xe7, 0xef, 0x9b, 0xf3, 0x9d, 0x19, 0xd8, 0x27, 0x49,
	0x60, 0x66, 0x96, 0xe9, 0xc5, 0xf3, 0x24, 0x0c, 0x48, 0xe4, 0xd1, 0x59, 0x4a, 0xd9, 0x22, 0xe4,
	0x6c, 0xc6, 0x68, 0x9a, 0x05, 0x1e, 0x35, 0x92, 0x34, 0xe6, 0x31, 0x52, 0x33, 0xab, 0xf5, 0xea,
	0x3c, 0x8e, 0xcf, 0x43, 0x6a, 0x0a, 0xe4, 0x6c, 0xf1, 0xbd, 0xc9, 0x83, 0x39, 0x65, 0x9c, 0xcc,
	0x93, 0x22, 0xa8, 0xf5, 0x42, 0x06, 0xe4, 0x45, 0x49, 0x14, 0xc5, 0x9c, 0xf0, 0x20, 0x8e, 0x98,
	0xf4, 0xbe, 0xbb, 0xea, 0x35, 0x8f, 0xa3, 0x02, 0xec, 0xfe, 0x51, 0x81, 0xa7, 0x83, 0xbb, 0xe6,
	0xae, 0x47, 0x22, 0x47, 0xf4, 0x47, 0x4d, 0x50, 0x03, 0x1f, 0x2b, 0x1d, 0xa5, 0x57, 0x77, 0xd4,
	0xc0, 0x47, 0xcf, 0xa0, 0xe6, 0xfd, 0x40, 0xbd, 0x8b, 0x59, 0xe0, 0x63, 0x55, 0xa0, 0x55, 0x61,
	0x8f, 0x7c, 0xf4, 0x12, 0xa0, 0x70, 0x45, 0x64, 0x4e, 0x71, 0x49, 0x38, 0xeb, 0x02, 0xb1, 0xc9,
	0x9c, 0x0a, 0x77, 0xb8, 0x60, 0x9c, 0xa6, 0x79, 0xee, 0x9e, 0x74, 0x17, 0xc8, 0xc8, 0x47, 0x9f,
	0x42, 0x85, 0x71, 0xc2, 0x17, 0x0c, 0x97, 0x3b, 0x4a, 0xaf, 0x69, 0xbd, 0x6f, 0x64, 0x96, 0xf1,
	0x10, 0x25, 0x63, 0x90, 0x97, 0x74, 0x45, 0xac, 0x23, 0x73, 0x50, 0x0b, 0x6a, 0x8c, 0x66, 0x34,
	0x0d, 0xf8, 0x12, 0x57, 0x44, 0xe9, 0x3b, 0x1b, 0x75, 0x40, 0xf3, 0x29, 0xf3, 0xd2, 0x20, 0xc9,
	0xc7, 0x80, 0xab, 0xc2, 0xbd, 0x0e, 0xa1, 0x2e, 0x34, 0x82, 0x88, 0xf1, 0x74, 0xe1, 0x89, 0x41,
	0xe1, 0x9a, 0x08, 0xd9, 0xc0, 0x72, 0x7e, 0x21, 0x39, 0xa3, 0x21, 0xc3, 0xf5, 0x4e, 0xa9, 0xa7,
	0xed, 0xe0, 0x37, 0x16, 0x61, 0xc3, 0x88, 0xa7, 0x4b, 0x47, 0xe6, 0xa0, 0xaf, 0x40, 0x5b, 0x53,
	0x02, 0x83, 0x28, 0xf1, 0x66, 0x6b, 0x89, 0xfe, 0x2a, 0xb6, 0xa8, 0xb3, 0x9e, 0x8d, 0x3e, 0x83,
	0x86, 0x97, 0x52, 0xc2, 0xa9, 0x3f, 0xcb, 0xa5, 0xc7, 0x5a, 0x47, 0xe9, 0x69, 0x56, 0xcb, 0x28,
	0x64, 0x37, 0x6e, 0xf7, 0xc2, 0x98, 0xde, 0xee, 0x85, 0xa3, 0xc9, 0xf8, 0x1c, 0x11, 0xb3, 0xe2,
	0x24, 0xf2, 0x49, 0xea, 0xe3, 0x86, 0x9c, 0x95, 0xb4, 0x11, 0x86, 0xaa, 0x17, 0x47, 0x3c, 0x8d,
	0x43, 0xfc, 0x8e, 0x54, 0xb7, 0x30, 0xd1, 0x73, 0xa8, 0x33, 0x8f, 0x44, 0x85, 0xb8, 0x4d, 0x99,
	0xe6, 0x91, 0x28, 0xd7, 0xb6, 0xf5, 0x31, 0x68, 0x6b, 0xb7, 0x46, 0x3a, 0x94, 0x2e, 0xe8, 0x52,
	0x6e, 0x4d, 0x7e, 0x44, 0x4f, 0xa1, 0x9c, 0x91, 0x70, 0x41, 0xe5, 0xce, 0x14, 0xc6, 0x27, 0xea,
	0x81, 0xd2, 0xfa, 0x1c, 0xf4, 0xfb, 0xb7, 0x7d, 0x4c, 0x7e, 0x97, 0x81, 0xb6, 0xb6, 0x10, 0xa8,
	0x0e, 0xe5, 0x53, 0xdb, 0x1d, 0x4e, 0xf5, 0x27, 0xa8, 0x06, 0x7b, 0x27, 0x7d, 0xd7, 0xd5, 0x95,
	0xfc, 0x74, 0xdc, 0x1f, 0x8d, 0x75, 0x35, 0x77, 0x0f, 0x1d, 0x67, 0xe2, 0xe8, 0xa5, 0x1c, 0x1c,
	0xd9, 0xc7, 0x13, 0x7d, 0x0f, 0x01, 0x54, 0xbe, 0xee, 0xdb, 0xa7, 0xfd, 0xb1, 0x5e, 0x46, 0x08,
	0x9a, 0xf6, 0x64, 0x3a, 0xeb, 0x9f, 0x9c, 0x8c, 0x47, 0x83, 0xfe, 0xd1, 0x78, 0xa8, 0x57, 0x90,
	0x0e, 0x8d, 0x91, 0x3d, 0x98, 0xd8, 0xee, 0xc8, 0x9d, 0x0e, 0xed, 0xa9, 0x5e, 0xed, 0x1e, 0xc2,
	0x8b, 0x87, 0x74, 0x63, 0x0e, 0xfd, 0x71, 0x41, 0x19, 0xdf, 0x1c, 0x96, 0xb2, 0x39, 0xac, 0xee,
	0x17, 0xf0, 0x7a, 0x95, 0x3c, 0x28, 0x1e, 0xc0, 0x03, 0x35, 0x36, 0xdf, 0x8b, 0x72, 0xef, 0xbd,
	0x74, 0xbf, 0x83, 0xf7, 0xc6, 0x01, 0xe3, 0x5b, 0x68, 0xb0, 0x24, 0x8e, 0x18, 0x45, 0x87, 0xd0,
	0x10, 0x3c, 0xe4, 0x67, 0x82, 0x15, 0xb1, 0x77, 0x78, 0xdb, 0xde, 0x39, 0x1a, 0x5b, 0x15, 0xb1,
	0xae, 0x4b, 0x80, 0x57, 0x51, 0x12, 0x75, 0x8b, 0xef, 0x08, 0xa5, 0xf0, 0x6c, 0x6b, 0x7b, 0x54,
	0xcf, 0x1b, 0x0c, 0xe7, 0x09, 0x5f, 0xb6, 0x3e, 0xc8, 0x8f, 0xff, 0x4b, 0xb4, 0xfb, 0xfa, 0xe7,
	0xeb, 0x7f, 0x7f, 0x51, 0x5f, 0xa2, 0xe7, 0x9b, 0xbf, 0xa0, 0x99, 0xf3, 0x31, 0x25, 0x7b, 0xf4,
	0xbb, 0x02, 0xaf, 0xbe, 0xa4, 0x7c, 0xd7, 0xf0, 0xd0, 0xfe, 0xe6, 0xdd, 0xb6, 0x8e, 0xf7, 0x6d,
	0x89, 0x1d, 0x08, 0x62, 0x16, 0xfa, 0x70, 0x07, 0x31, 0x53, 0xaa, 0x62, 0x5e, 0xae, 0x04, 0xbb,
	0x42, 0xbf, 0x2a, 0x80, 0x37, 0xd8, 0xae, 0xd3, 0xec, 0x6c, 0x93, 0xe0, 0xb1, 0xfc, 0x4c, 0xc1,
	0xef, 0x0d, 0xda, 0xdf, 0xc5, 0xef, 0xf2, 0x6e, 0x19, 0xaf, 0x8e, 0x8c, 0x3f, 0x6f, 0xda, 0xca,
	0x5f, 0x37, 0x6d, 0xe5, 0xef, 0x9b, 0xb6, 0xf2, 0xdb, 0x3f, 0xed, 0x27, 0x80, 0x83, 0xd8, 0x60,
	0x9c, 0x78, 0x17, 0x69, 0xfc, 0x53, 0xf1, 0x79, 0x18, 0x24, 0x09, 0x8c, 0xcc, 0xfa, 0x56, 0xcd,
	0xac, 0x6f, 0x94, 0xb3, 0x8a, 0xc0, 0x3e, 0xfa, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xef, 0xa5, 0x95,
	0x1b, 0xa5, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ComplianceResultsServiceClient is the client API for ComplianceResultsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConnInterface.NewStream.
type ComplianceResultsServiceClient interface {
	// ListComplianceScanResults lists all current scan results
	ListComplianceScanResults(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListComplianceScanResultsResponse, error)
	// GetComplianceClusterScanResults retrieves the compliance operator scan results for the specified cluster
	GetComplianceClusterScanResults(ctx context.Context, in *ComplianceClusterScanResultsRequest, opts ...grpc.CallOption) (*ListComplianceScanResultsResponse, error)
	// GetComplianceClusterResults retrieves the compliance operator scan results for the specified scan setting
	GetComplianceScanResults(ctx context.Context, in *ComplianceScanResultsRequest, opts ...grpc.CallOption) (*ListComplianceScanResultsResponse, error)
}

type complianceResultsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComplianceResultsServiceClient(cc grpc.ClientConnInterface) ComplianceResultsServiceClient {
	return &complianceResultsServiceClient{cc}
}

func (c *complianceResultsServiceClient) ListComplianceScanResults(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListComplianceScanResultsResponse, error) {
	out := new(ListComplianceScanResultsResponse)
	err := c.cc.Invoke(ctx, "/v2.ComplianceResultsService/ListComplianceScanResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceResultsServiceClient) GetComplianceClusterScanResults(ctx context.Context, in *ComplianceClusterScanResultsRequest, opts ...grpc.CallOption) (*ListComplianceScanResultsResponse, error) {
	out := new(ListComplianceScanResultsResponse)
	err := c.cc.Invoke(ctx, "/v2.ComplianceResultsService/GetComplianceClusterScanResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceResultsServiceClient) GetComplianceScanResults(ctx context.Context, in *ComplianceScanResultsRequest, opts ...grpc.CallOption) (*ListComplianceScanResultsResponse, error) {
	out := new(ListComplianceScanResultsResponse)
	err := c.cc.Invoke(ctx, "/v2.ComplianceResultsService/GetComplianceScanResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComplianceResultsServiceServer is the server API for ComplianceResultsService service.
type ComplianceResultsServiceServer interface {
	// ListComplianceScanResults lists all current scan results
	ListComplianceScanResults(context.Context, *Empty) (*ListComplianceScanResultsResponse, error)
	// GetComplianceClusterScanResults retrieves the compliance operator scan results for the specified cluster
	GetComplianceClusterScanResults(context.Context, *ComplianceClusterScanResultsRequest) (*ListComplianceScanResultsResponse, error)
	// GetComplianceClusterResults retrieves the compliance operator scan results for the specified scan setting
	GetComplianceScanResults(context.Context, *ComplianceScanResultsRequest) (*ListComplianceScanResultsResponse, error)
}

// UnimplementedComplianceResultsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedComplianceResultsServiceServer struct {
}

func (*UnimplementedComplianceResultsServiceServer) ListComplianceScanResults(ctx context.Context, req *Empty) (*ListComplianceScanResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComplianceScanResults not implemented")
}
func (*UnimplementedComplianceResultsServiceServer) GetComplianceClusterScanResults(ctx context.Context, req *ComplianceClusterScanResultsRequest) (*ListComplianceScanResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComplianceClusterScanResults not implemented")
}
func (*UnimplementedComplianceResultsServiceServer) GetComplianceScanResults(ctx context.Context, req *ComplianceScanResultsRequest) (*ListComplianceScanResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComplianceScanResults not implemented")
}

func RegisterComplianceResultsServiceServer(s *grpc.Server, srv ComplianceResultsServiceServer) {
	s.RegisterService(&_ComplianceResultsService_serviceDesc, srv)
}

func _ComplianceResultsService_ListComplianceScanResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceResultsServiceServer).ListComplianceScanResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ComplianceResultsService/ListComplianceScanResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceResultsServiceServer).ListComplianceScanResults(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceResultsService_GetComplianceClusterScanResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComplianceClusterScanResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceResultsServiceServer).GetComplianceClusterScanResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ComplianceResultsService/GetComplianceClusterScanResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceResultsServiceServer).GetComplianceClusterScanResults(ctx, req.(*ComplianceClusterScanResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceResultsService_GetComplianceScanResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComplianceScanResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceResultsServiceServer).GetComplianceScanResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ComplianceResultsService/GetComplianceScanResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceResultsServiceServer).GetComplianceScanResults(ctx, req.(*ComplianceScanResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ComplianceResultsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v2.ComplianceResultsService",
	HandlerType: (*ComplianceResultsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListComplianceScanResults",
			Handler:    _ComplianceResultsService_ListComplianceScanResults_Handler,
		},
		{
			MethodName: "GetComplianceClusterScanResults",
			Handler:    _ComplianceResultsService_GetComplianceClusterScanResults_Handler,
		},
		{
			MethodName: "GetComplianceScanResults",
			Handler:    _ComplianceResultsService_GetComplianceScanResults_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v2/compliance_results_service.proto",
}

func (m *ComplianceScanResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceScanResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceScanResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ScanName) > 0 {
		i -= len(m.ScanName)
		copy(dAtA[i:], m.ScanName)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.ScanName)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Control) > 0 {
		i -= len(m.Control)
		copy(dAtA[i:], m.Control)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.Control)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Standard) > 0 {
		i -= len(m.Standard)
		copy(dAtA[i:], m.Standard)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.Standard)))
		i--
		dAtA[i] = 0x62
	}
	if m.CreatedTime != nil {
		{
			size, err := m.CreatedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceResultsService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Annotations) > 0 {
		for k := range m.Annotations {
			v := m.Annotations[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintComplianceResultsService(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintComplianceResultsService(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Instructions) > 0 {
		i -= len(m.Instructions)
		copy(dAtA[i:], m.Instructions)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.Instructions)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Severity) > 0 {
		i -= len(m.Severity)
		copy(dAtA[i:], m.Severity)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.Severity)))
		i--
		dAtA[i] = 0x32
	}
	if m.Status != 0 {
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CheckName) > 0 {
		i -= len(m.CheckName)
		copy(dAtA[i:], m.CheckName)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.CheckName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CheckId) > 0 {
		i -= len(m.CheckId)
		copy(dAtA[i:], m.CheckId)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.CheckId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceScanResultsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceScanResultsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceScanResultsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ScanName) > 0 {
		i -= len(m.ScanName)
		copy(dAtA[i:], m.ScanName)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.ScanName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceClusterScanResultsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceClusterScanResultsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceClusterScanResultsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintComplianceResultsService(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListComplianceScanResultsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListComplianceScanResultsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListComplianceScanResultsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ScanResults) > 0 {
		for iNdEx := len(m.ScanResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ScanResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComplianceResultsService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintComplianceResultsService(dAtA []byte, offset int, v uint64) int {
	offset -= sovComplianceResultsService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ComplianceScanResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	l = len(m.CheckId)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	l = len(m.CheckName)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovComplianceResultsService(uint64(m.Status))
	}
	l = len(m.Severity)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	l = len(m.Instructions)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovComplianceResultsService(uint64(len(k))) + 1 + len(v) + sovComplianceResultsService(uint64(len(v)))
			n += mapEntrySize + 1 + sovComplianceResultsService(uint64(mapEntrySize))
		}
	}
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovComplianceResultsService(uint64(len(k))) + 1 + len(v) + sovComplianceResultsService(uint64(len(v)))
			n += mapEntrySize + 1 + sovComplianceResultsService(uint64(mapEntrySize))
		}
	}
	if m.CreatedTime != nil {
		l = m.CreatedTime.Size()
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	l = len(m.Standard)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	l = len(m.Control)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	l = len(m.ScanName)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceScanResultsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScanName)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceClusterScanResultsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovComplianceResultsService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListComplianceScanResultsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ScanResults) > 0 {
		for _, e := range m.ScanResults {
			l = e.Size()
			n += 1 + l + sovComplianceResultsService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovComplianceResultsService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozComplianceResultsService(x uint64) (n int) {
	return sovComplianceResultsService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ComplianceScanResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceResultsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceScanResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceScanResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ComplianceScanResult_CheckStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Severity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Severity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instructions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instructions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowComplianceResultsService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowComplianceResultsService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthComplianceResultsService
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthComplianceResultsService
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowComplianceResultsService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthComplianceResultsService
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthComplianceResultsService
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipComplianceResultsService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthComplianceResultsService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowComplianceResultsService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowComplianceResultsService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthComplianceResultsService
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthComplianceResultsService
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowComplianceResultsService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthComplianceResultsService
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthComplianceResultsService
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipComplianceResultsService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthComplianceResultsService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedTime == nil {
				m.CreatedTime = &types.Timestamp{}
			}
			if err := m.CreatedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Standard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Standard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScanName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceResultsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceScanResultsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceResultsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceScanResultsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceScanResultsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScanName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceResultsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceClusterScanResultsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceResultsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceClusterScanResultsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceClusterScanResultsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceResultsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListComplianceScanResultsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceResultsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListComplianceScanResultsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListComplianceScanResultsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScanResults = append(m.ScanResults, &ComplianceScanResult{})
			if err := m.ScanResults[len(m.ScanResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceResultsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceResultsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipComplianceResultsService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowComplianceResultsService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComplianceResultsService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthComplianceResultsService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupComplianceResultsService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthComplianceResultsService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthComplianceResultsService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowComplianceResultsService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupComplianceResultsService = fmt.Errorf("proto: unexpected end of group")
)
