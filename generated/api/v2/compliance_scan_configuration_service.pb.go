// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v2/compliance_scan_configuration_service.proto

package v2

import (
	context "context"
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ClusterScanStatus holds status based on cluster in the event that a scan configuration
// was successfully applied to some clusters but not others.
// Next available tag: 3
type ClusterScanStatus struct {
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Errors               []string `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterScanStatus) Reset()         { *m = ClusterScanStatus{} }
func (m *ClusterScanStatus) String() string { return proto.CompactTextString(m) }
func (*ClusterScanStatus) ProtoMessage()    {}
func (*ClusterScanStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_d441c70a62230c3d, []int{0}
}
func (m *ClusterScanStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterScanStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterScanStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterScanStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterScanStatus.Merge(m, src)
}
func (m *ClusterScanStatus) XXX_Size() int {
	return m.Size()
}
func (m *ClusterScanStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterScanStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterScanStatus proto.InternalMessageInfo

func (m *ClusterScanStatus) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ClusterScanStatus) GetErrors() []string {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *ClusterScanStatus) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ClusterScanStatus) Clone() *ClusterScanStatus {
	if m == nil {
		return nil
	}
	cloned := new(ClusterScanStatus)
	*cloned = *m

	if m.Errors != nil {
		cloned.Errors = make([]string, len(m.Errors))
		copy(cloned.Errors, m.Errors)
	}
	return cloned
}

// Next available tag: 7
type BaseComplianceScanScheduleSettings struct {
	OneTimeScan          bool      `protobuf:"varint,1,opt,name=one_time_scan,json=oneTimeScan,proto3" json:"one_time_scan,omitempty"`
	Profiles             []string  `protobuf:"bytes,2,rep,name=profiles,proto3" json:"profiles,omitempty"`
	Schedule             *Schedule `protobuf:"bytes,3,opt,name=schedule,proto3" json:"schedule,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *BaseComplianceScanScheduleSettings) Reset()         { *m = BaseComplianceScanScheduleSettings{} }
func (m *BaseComplianceScanScheduleSettings) String() string { return proto.CompactTextString(m) }
func (*BaseComplianceScanScheduleSettings) ProtoMessage()    {}
func (*BaseComplianceScanScheduleSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_d441c70a62230c3d, []int{1}
}
func (m *BaseComplianceScanScheduleSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseComplianceScanScheduleSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseComplianceScanScheduleSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseComplianceScanScheduleSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseComplianceScanScheduleSettings.Merge(m, src)
}
func (m *BaseComplianceScanScheduleSettings) XXX_Size() int {
	return m.Size()
}
func (m *BaseComplianceScanScheduleSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseComplianceScanScheduleSettings.DiscardUnknown(m)
}

var xxx_messageInfo_BaseComplianceScanScheduleSettings proto.InternalMessageInfo

func (m *BaseComplianceScanScheduleSettings) GetOneTimeScan() bool {
	if m != nil {
		return m.OneTimeScan
	}
	return false
}

func (m *BaseComplianceScanScheduleSettings) GetProfiles() []string {
	if m != nil {
		return m.Profiles
	}
	return nil
}

func (m *BaseComplianceScanScheduleSettings) GetSchedule() *Schedule {
	if m != nil {
		return m.Schedule
	}
	return nil
}

func (m *BaseComplianceScanScheduleSettings) MessageClone() proto.Message {
	return m.Clone()
}
func (m *BaseComplianceScanScheduleSettings) Clone() *BaseComplianceScanScheduleSettings {
	if m == nil {
		return nil
	}
	cloned := new(BaseComplianceScanScheduleSettings)
	*cloned = *m

	if m.Profiles != nil {
		cloned.Profiles = make([]string, len(m.Profiles))
		copy(cloned.Profiles, m.Profiles)
	}
	cloned.Schedule = m.Schedule.Clone()
	return cloned
}

// Next available tag: 4
type ComplianceScanConfiguration struct {
	ScanName             string                              `protobuf:"bytes,1,opt,name=scan_name,json=scanName,proto3" json:"scan_name,omitempty"`
	ScanScheduleConfig   *BaseComplianceScanScheduleSettings `protobuf:"bytes,2,opt,name=scan_schedule_config,json=scanScheduleConfig,proto3" json:"scan_schedule_config,omitempty"`
	Clusters             []string                            `protobuf:"bytes,3,rep,name=clusters,proto3" json:"clusters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *ComplianceScanConfiguration) Reset()         { *m = ComplianceScanConfiguration{} }
func (m *ComplianceScanConfiguration) String() string { return proto.CompactTextString(m) }
func (*ComplianceScanConfiguration) ProtoMessage()    {}
func (*ComplianceScanConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_d441c70a62230c3d, []int{2}
}
func (m *ComplianceScanConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceScanConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceScanConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceScanConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceScanConfiguration.Merge(m, src)
}
func (m *ComplianceScanConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceScanConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceScanConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceScanConfiguration proto.InternalMessageInfo

func (m *ComplianceScanConfiguration) GetScanName() string {
	if m != nil {
		return m.ScanName
	}
	return ""
}

func (m *ComplianceScanConfiguration) GetScanScheduleConfig() *BaseComplianceScanScheduleSettings {
	if m != nil {
		return m.ScanScheduleConfig
	}
	return nil
}

func (m *ComplianceScanConfiguration) GetClusters() []string {
	if m != nil {
		return m.Clusters
	}
	return nil
}

func (m *ComplianceScanConfiguration) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceScanConfiguration) Clone() *ComplianceScanConfiguration {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceScanConfiguration)
	*cloned = *m

	cloned.ScanScheduleConfig = m.ScanScheduleConfig.Clone()
	if m.Clusters != nil {
		cloned.Clusters = make([]string, len(m.Clusters))
		copy(cloned.Clusters, m.Clusters)
	}
	return cloned
}

// Next available tag: 7
type ComplianceScanConfigurationStatus struct {
	ScanName           string                              `protobuf:"bytes,1,opt,name=scan_name,json=scanName,proto3" json:"scan_name,omitempty"`
	ScanScheduleConfig *BaseComplianceScanScheduleSettings `protobuf:"bytes,2,opt,name=scan_schedule_config,json=scanScheduleConfig,proto3" json:"scan_schedule_config,omitempty"`
	Clusters           []*ClusterScanStatus                `protobuf:"bytes,3,rep,name=clusters,proto3" json:"clusters,omitempty"`
	CreatedTime        *types.Timestamp                    `protobuf:"bytes,4,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	LastUpdatedTime    *types.Timestamp                    `protobuf:"bytes,5,opt,name=last_updated_time,json=lastUpdatedTime,proto3" json:"last_updated_time,omitempty"`
	// Most recent user to update the scan settings
	CreatedBy            *SlimUser `protobuf:"bytes,6,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ComplianceScanConfigurationStatus) Reset()         { *m = ComplianceScanConfigurationStatus{} }
func (m *ComplianceScanConfigurationStatus) String() string { return proto.CompactTextString(m) }
func (*ComplianceScanConfigurationStatus) ProtoMessage()    {}
func (*ComplianceScanConfigurationStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_d441c70a62230c3d, []int{3}
}
func (m *ComplianceScanConfigurationStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceScanConfigurationStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceScanConfigurationStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceScanConfigurationStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceScanConfigurationStatus.Merge(m, src)
}
func (m *ComplianceScanConfigurationStatus) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceScanConfigurationStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceScanConfigurationStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceScanConfigurationStatus proto.InternalMessageInfo

func (m *ComplianceScanConfigurationStatus) GetScanName() string {
	if m != nil {
		return m.ScanName
	}
	return ""
}

func (m *ComplianceScanConfigurationStatus) GetScanScheduleConfig() *BaseComplianceScanScheduleSettings {
	if m != nil {
		return m.ScanScheduleConfig
	}
	return nil
}

func (m *ComplianceScanConfigurationStatus) GetClusters() []*ClusterScanStatus {
	if m != nil {
		return m.Clusters
	}
	return nil
}

func (m *ComplianceScanConfigurationStatus) GetCreatedTime() *types.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

func (m *ComplianceScanConfigurationStatus) GetLastUpdatedTime() *types.Timestamp {
	if m != nil {
		return m.LastUpdatedTime
	}
	return nil
}

func (m *ComplianceScanConfigurationStatus) GetCreatedBy() *SlimUser {
	if m != nil {
		return m.CreatedBy
	}
	return nil
}

func (m *ComplianceScanConfigurationStatus) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceScanConfigurationStatus) Clone() *ComplianceScanConfigurationStatus {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceScanConfigurationStatus)
	*cloned = *m

	cloned.ScanScheduleConfig = m.ScanScheduleConfig.Clone()
	if m.Clusters != nil {
		cloned.Clusters = make([]*ClusterScanStatus, len(m.Clusters))
		for idx, v := range m.Clusters {
			cloned.Clusters[idx] = v.Clone()
		}
	}
	cloned.CreatedTime = m.CreatedTime.Clone()
	cloned.LastUpdatedTime = m.LastUpdatedTime.Clone()
	cloned.CreatedBy = m.CreatedBy.Clone()
	return cloned
}

// Next available tag: 2
type ComplianceScanConfigurationRequest struct {
	ScanName             string   `protobuf:"bytes,1,opt,name=scan_name,json=scanName,proto3" json:"scan_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComplianceScanConfigurationRequest) Reset()         { *m = ComplianceScanConfigurationRequest{} }
func (m *ComplianceScanConfigurationRequest) String() string { return proto.CompactTextString(m) }
func (*ComplianceScanConfigurationRequest) ProtoMessage()    {}
func (*ComplianceScanConfigurationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d441c70a62230c3d, []int{4}
}
func (m *ComplianceScanConfigurationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceScanConfigurationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceScanConfigurationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceScanConfigurationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceScanConfigurationRequest.Merge(m, src)
}
func (m *ComplianceScanConfigurationRequest) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceScanConfigurationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceScanConfigurationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceScanConfigurationRequest proto.InternalMessageInfo

func (m *ComplianceScanConfigurationRequest) GetScanName() string {
	if m != nil {
		return m.ScanName
	}
	return ""
}

func (m *ComplianceScanConfigurationRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ComplianceScanConfigurationRequest) Clone() *ComplianceScanConfigurationRequest {
	if m == nil {
		return nil
	}
	cloned := new(ComplianceScanConfigurationRequest)
	*cloned = *m

	return cloned
}

// Next available tag: 2
type ListComplianceScanConfigurationResponse struct {
	Schedules            []*ComplianceScanConfigurationStatus `protobuf:"bytes,1,rep,name=schedules,proto3" json:"schedules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *ListComplianceScanConfigurationResponse) Reset() {
	*m = ListComplianceScanConfigurationResponse{}
}
func (m *ListComplianceScanConfigurationResponse) String() string { return proto.CompactTextString(m) }
func (*ListComplianceScanConfigurationResponse) ProtoMessage()    {}
func (*ListComplianceScanConfigurationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d441c70a62230c3d, []int{5}
}
func (m *ListComplianceScanConfigurationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListComplianceScanConfigurationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListComplianceScanConfigurationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListComplianceScanConfigurationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListComplianceScanConfigurationResponse.Merge(m, src)
}
func (m *ListComplianceScanConfigurationResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListComplianceScanConfigurationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListComplianceScanConfigurationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListComplianceScanConfigurationResponse proto.InternalMessageInfo

func (m *ListComplianceScanConfigurationResponse) GetSchedules() []*ComplianceScanConfigurationStatus {
	if m != nil {
		return m.Schedules
	}
	return nil
}

func (m *ListComplianceScanConfigurationResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ListComplianceScanConfigurationResponse) Clone() *ListComplianceScanConfigurationResponse {
	if m == nil {
		return nil
	}
	cloned := new(ListComplianceScanConfigurationResponse)
	*cloned = *m

	if m.Schedules != nil {
		cloned.Schedules = make([]*ComplianceScanConfigurationStatus, len(m.Schedules))
		for idx, v := range m.Schedules {
			cloned.Schedules[idx] = v.Clone()
		}
	}
	return cloned
}

func init() {
	proto.RegisterType((*ClusterScanStatus)(nil), "v2.ClusterScanStatus")
	proto.RegisterType((*BaseComplianceScanScheduleSettings)(nil), "v2.BaseComplianceScanScheduleSettings")
	proto.RegisterType((*ComplianceScanConfiguration)(nil), "v2.ComplianceScanConfiguration")
	proto.RegisterType((*ComplianceScanConfigurationStatus)(nil), "v2.ComplianceScanConfigurationStatus")
	proto.RegisterType((*ComplianceScanConfigurationRequest)(nil), "v2.ComplianceScanConfigurationRequest")
	proto.RegisterType((*ListComplianceScanConfigurationResponse)(nil), "v2.ListComplianceScanConfigurationResponse")
}

func init() {
	proto.RegisterFile("api/v2/compliance_scan_configuration_service.proto", fileDescriptor_d441c70a62230c3d)
}

var fileDescriptor_d441c70a62230c3d = []byte{
	// 733 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x95, 0x5d, 0x6b, 0xd4, 0x4c,
	0x14, 0xc7, 0x9f, 0xd9, 0x7d, 0xac, 0xbb, 0xb3, 0x15, 0xe9, 0xf8, 0x42, 0x48, 0xed, 0xee, 0x36,
	0xd0, 0x76, 0x6d, 0x31, 0x6b, 0x53, 0x28, 0x2a, 0x28, 0xd8, 0xf5, 0x05, 0x45, 0x44, 0xd2, 0x16,
	0x8a, 0x37, 0xcb, 0x34, 0x7b, 0xba, 0x06, 0x93, 0x99, 0x98, 0x99, 0x2c, 0x2d, 0xe2, 0x45, 0xbd,
	0xf4, 0xa2, 0xa0, 0xbd, 0xf1, 0xda, 0x4f, 0xe0, 0xc7, 0xf0, 0x52, 0xf0, 0x0b, 0x48, 0xf5, 0x83,
	0x48, 0x26, 0xd9, 0x97, 0xfa, 0x92, 0xac, 0x28, 0x78, 0x97, 0x39, 0x33, 0xf3, 0x3f, 0xbf, 0x73,
	0xfe, 0x87, 0x09, 0xb6, 0x68, 0xe0, 0x36, 0x7b, 0x56, 0xd3, 0xe1, 0x7e, 0xe0, 0xb9, 0x94, 0x39,
	0xd0, 0x16, 0x0e, 0x65, 0x6d, 0x87, 0xb3, 0x1d, 0xb7, 0x1b, 0x85, 0x54, 0xba, 0x9c, 0xb5, 0x05,
	0x84, 0x3d, 0xd7, 0x01, 0x33, 0x08, 0xb9, 0xe4, 0xa4, 0xd0, 0xb3, 0xf4, 0x5a, 0x97, 0xf3, 0xae,
	0x07, 0x4d, 0x15, 0xd9, 0x8e, 0x76, 0x9a, 0xd2, 0xf5, 0x41, 0x48, 0xea, 0x07, 0xc9, 0x21, 0xfd,
	0x42, 0x7a, 0x20, 0xd6, 0xa7, 0x8c, 0x71, 0xa9, 0x94, 0x44, 0xba, 0x7b, 0x66, 0x98, 0xd6, 0xe7,
	0x2c, 0x0d, 0x4e, 0xa5, 0xc1, 0x48, 0x40, 0x98, 0x84, 0x8c, 0xfb, 0x78, 0xaa, 0xe5, 0x45, 0x42,
	0x42, 0xb8, 0xee, 0x50, 0xb6, 0x2e, 0xa9, 0x8c, 0x04, 0x99, 0xc1, 0xd8, 0x49, 0x82, 0x6d, 0xb7,
	0xa3, 0xa1, 0x3a, 0x6a, 0x94, 0xed, 0x72, 0x1a, 0xb9, 0xd7, 0x21, 0xe7, 0xf1, 0x04, 0x84, 0x21,
	0x0f, 0x85, 0x56, 0xa8, 0x17, 0x1b, 0x65, 0x3b, 0x5d, 0x19, 0x07, 0x08, 0x1b, 0x6b, 0x54, 0x40,
	0x6b, 0x50, 0xaa, 0xd2, 0x74, 0x9e, 0x40, 0x27, 0xf2, 0x60, 0x1d, 0xa4, 0x74, 0x59, 0x57, 0x10,
	0x03, 0x9f, 0xe2, 0x0c, 0xda, 0x71, 0x3d, 0xaa, 0x15, 0x2a, 0x41, 0xc9, 0xae, 0x70, 0x06, 0x1b,
	0xae, 0xaf, 0xee, 0x10, 0x1d, 0x97, 0x82, 0x90, 0xef, 0xb8, 0x1e, 0xf4, 0x93, 0x0c, 0xd6, 0xa4,
	0x81, 0x4b, 0x22, 0xd5, 0xd4, 0x8a, 0x75, 0xd4, 0xa8, 0x58, 0x93, 0x66, 0xcf, 0x32, 0xfb, 0x79,
	0xec, 0xc1, 0xae, 0xf1, 0x1e, 0xe1, 0xe9, 0xe3, 0x30, 0xad, 0xd1, 0xae, 0x93, 0x69, 0x5c, 0x56,
	0x5e, 0x30, 0xea, 0x43, 0x5a, 0x66, 0x29, 0x0e, 0x3c, 0xa4, 0x3e, 0x90, 0x2d, 0x7c, 0x56, 0x6d,
	0xf6, 0xd5, 0x52, 0xc7, 0xb4, 0x82, 0x4a, 0x39, 0x1f, 0xa7, 0xcc, 0x2f, 0xd6, 0x26, 0x62, 0x24,
	0x9a, 0x64, 0x8f, 0x8b, 0x4b, 0x9b, 0x29, 0xb4, 0x62, 0x52, 0x5c, 0x7f, 0x6d, 0xec, 0x17, 0xf1,
	0x6c, 0x06, 0x72, 0x6a, 0xd0, 0x3f, 0x02, 0x5f, 0xfe, 0x0e, 0xbc, 0x62, 0x9d, 0x8b, 0xd5, 0x7e,
	0x18, 0xa0, 0x61, 0x3d, 0xe4, 0x3a, 0x9e, 0x74, 0x42, 0xa0, 0x12, 0x3a, 0xca, 0x70, 0xed, 0x7f,
	0x05, 0xa1, 0x9b, 0xc9, 0xf0, 0x9a, 0xfd, 0xe9, 0x36, 0x37, 0xfa, 0xd3, 0x6d, 0x57, 0xd2, 0xf3,
	0x71, 0x84, 0xdc, 0xc1, 0x53, 0x1e, 0x15, 0xb2, 0x1d, 0x05, 0x9d, 0xa1, 0xc6, 0x89, 0x5c, 0x8d,
	0xd3, 0xf1, 0xa5, 0xcd, 0xe4, 0x8e, 0xd2, 0x59, 0xc2, 0xb8, 0x8f, 0xb1, 0xbd, 0xa7, 0x4d, 0x8c,
	0x4c, 0x8d, 0xe7, 0xfa, 0x9b, 0x02, 0x42, 0xbb, 0x9c, 0xee, 0xaf, 0xed, 0x19, 0x37, 0xb1, 0x91,
	0x61, 0x81, 0x0d, 0xcf, 0x22, 0x10, 0x32, 0xd3, 0x03, 0x83, 0xe1, 0x85, 0x07, 0xae, 0x90, 0x99,
	0x32, 0x22, 0xe0, 0x4c, 0x00, 0x69, 0xc5, 0x3a, 0x49, 0x9b, 0x85, 0x86, 0x54, 0x57, 0xe7, 0x54,
	0x57, 0xf3, 0xa6, 0xc0, 0x1e, 0xde, 0xb3, 0x5e, 0x9f, 0xc4, 0x33, 0xbf, 0x32, 0x54, 0xbd, 0x2c,
	0x64, 0x1f, 0xe1, 0x7a, 0x0e, 0x92, 0x20, 0xe5, 0x38, 0xf1, 0x6d, 0x3f, 0x90, 0x7b, 0xfa, 0x52,
	0xfc, 0x39, 0x66, 0x0d, 0xc6, 0xdc, 0xcb, 0x4f, 0x5f, 0x0f, 0x0b, 0x35, 0x32, 0x73, 0xfc, 0xa5,
	0x6b, 0xc6, 0xfd, 0x68, 0x0e, 0x28, 0xc9, 0x3b, 0x84, 0xab, 0x77, 0x21, 0x4b, 0x91, 0xcc, 0xe7,
	0x94, 0x9e, 0x76, 0x5f, 0x1f, 0xaf, 0x45, 0xc6, 0xb2, 0x02, 0x5b, 0x22, 0x17, 0x33, 0xc1, 0x9a,
	0xcf, 0x07, 0x4e, 0xbe, 0x20, 0x6f, 0x10, 0xae, 0x3d, 0xe2, 0x99, 0x75, 0x93, 0x5a, 0x4e, 0x76,
	0x3d, 0xef, 0x80, 0x71, 0x49, 0x81, 0x2d, 0x18, 0xc6, 0xcf, 0xc0, 0x8e, 0xfd, 0x1b, 0xc4, 0x35,
	0xb4, 0x48, 0x5e, 0x21, 0x3c, 0x9b, 0xcc, 0xf3, 0x1f, 0x61, 0x0d, 0xfd, 0x35, 0xae, 0x2a, 0x80,
	0x15, 0xdd, 0xcc, 0x07, 0x18, 0x6d, 0x4f, 0x0c, 0x73, 0x80, 0xf0, 0xec, 0x2d, 0xf0, 0x20, 0x1b,
	0x66, 0x5c, 0x27, 0x47, 0x98, 0x56, 0x15, 0xd3, 0xe5, 0xc5, 0xdf, 0x64, 0x22, 0x87, 0x08, 0x57,
	0xed, 0x88, 0xfd, 0x65, 0x9a, 0x1b, 0x8a, 0xe6, 0x0a, 0x59, 0x1d, 0x83, 0x06, 0x76, 0xc1, 0x89,
	0x24, 0x8c, 0x52, 0xad, 0x99, 0x1f, 0x8e, 0xaa, 0xe8, 0xe3, 0x51, 0x15, 0x7d, 0x3e, 0xaa, 0xa2,
	0xb7, 0x5f, 0xaa, 0xff, 0x61, 0xcd, 0xe5, 0xa6, 0x90, 0xd4, 0x79, 0x1a, 0xf2, 0xdd, 0xe4, 0xd9,
	0x32, 0x69, 0xe0, 0x9a, 0x3d, 0xeb, 0x71, 0xa1, 0x67, 0x6d, 0xa1, 0xed, 0x09, 0x15, 0x5b, 0xf9,
	0x16, 0x00, 0x00, 0xff, 0xff, 0x01, 0xe6, 0x45, 0x72, 0x34, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ComplianceScanScheduleServiceClient is the client API for ComplianceScanScheduleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConnInterface.NewStream.
type ComplianceScanScheduleServiceClient interface {
	// ListComplianceScanConfigurations lists all the compliance operator scan configurations for the secured clusters
	ListComplianceScanConfigurations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListComplianceScanConfigurationResponse, error)
	// GetComplianceScanConfiguration retrieves the specified compliance scan configurations
	GetComplianceScanConfiguration(ctx context.Context, in *ComplianceScanConfigurationRequest, opts ...grpc.CallOption) (*ComplianceScanConfigurationStatus, error)
	// PostComplianceScanConfiguration creates a compliance scan configuration
	PostComplianceScanConfiguration(ctx context.Context, in *ComplianceScanConfiguration, opts ...grpc.CallOption) (*ComplianceScanConfiguration, error)
	// UpdateComplianceScanConfiguration updates a compliance scan configuration
	UpdateComplianceScanConfiguration(ctx context.Context, in *ComplianceScanConfiguration, opts ...grpc.CallOption) (*Empty, error)
	// DeleteComplianceScanConfiguration removes the compliance scan configuration with given Name
	DeleteComplianceScanConfiguration(ctx context.Context, in *ComplianceScanConfigurationRequest, opts ...grpc.CallOption) (*Empty, error)
	// RunComplianceScanConfiguration launches scan for the specified scan configuration
	RunComplianceScanConfiguration(ctx context.Context, in *ComplianceScanConfigurationRequest, opts ...grpc.CallOption) (*Empty, error)
}

type complianceScanScheduleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComplianceScanScheduleServiceClient(cc grpc.ClientConnInterface) ComplianceScanScheduleServiceClient {
	return &complianceScanScheduleServiceClient{cc}
}

func (c *complianceScanScheduleServiceClient) ListComplianceScanConfigurations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListComplianceScanConfigurationResponse, error) {
	out := new(ListComplianceScanConfigurationResponse)
	err := c.cc.Invoke(ctx, "/v2.ComplianceScanScheduleService/ListComplianceScanConfigurations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceScanScheduleServiceClient) GetComplianceScanConfiguration(ctx context.Context, in *ComplianceScanConfigurationRequest, opts ...grpc.CallOption) (*ComplianceScanConfigurationStatus, error) {
	out := new(ComplianceScanConfigurationStatus)
	err := c.cc.Invoke(ctx, "/v2.ComplianceScanScheduleService/GetComplianceScanConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceScanScheduleServiceClient) PostComplianceScanConfiguration(ctx context.Context, in *ComplianceScanConfiguration, opts ...grpc.CallOption) (*ComplianceScanConfiguration, error) {
	out := new(ComplianceScanConfiguration)
	err := c.cc.Invoke(ctx, "/v2.ComplianceScanScheduleService/PostComplianceScanConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceScanScheduleServiceClient) UpdateComplianceScanConfiguration(ctx context.Context, in *ComplianceScanConfiguration, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v2.ComplianceScanScheduleService/UpdateComplianceScanConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceScanScheduleServiceClient) DeleteComplianceScanConfiguration(ctx context.Context, in *ComplianceScanConfigurationRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v2.ComplianceScanScheduleService/DeleteComplianceScanConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceScanScheduleServiceClient) RunComplianceScanConfiguration(ctx context.Context, in *ComplianceScanConfigurationRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v2.ComplianceScanScheduleService/RunComplianceScanConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComplianceScanScheduleServiceServer is the server API for ComplianceScanScheduleService service.
type ComplianceScanScheduleServiceServer interface {
	// ListComplianceScanConfigurations lists all the compliance operator scan configurations for the secured clusters
	ListComplianceScanConfigurations(context.Context, *Empty) (*ListComplianceScanConfigurationResponse, error)
	// GetComplianceScanConfiguration retrieves the specified compliance scan configurations
	GetComplianceScanConfiguration(context.Context, *ComplianceScanConfigurationRequest) (*ComplianceScanConfigurationStatus, error)
	// PostComplianceScanConfiguration creates a compliance scan configuration
	PostComplianceScanConfiguration(context.Context, *ComplianceScanConfiguration) (*ComplianceScanConfiguration, error)
	// UpdateComplianceScanConfiguration updates a compliance scan configuration
	UpdateComplianceScanConfiguration(context.Context, *ComplianceScanConfiguration) (*Empty, error)
	// DeleteComplianceScanConfiguration removes the compliance scan configuration with given Name
	DeleteComplianceScanConfiguration(context.Context, *ComplianceScanConfigurationRequest) (*Empty, error)
	// RunComplianceScanConfiguration launches scan for the specified scan configuration
	RunComplianceScanConfiguration(context.Context, *ComplianceScanConfigurationRequest) (*Empty, error)
}

// UnimplementedComplianceScanScheduleServiceServer can be embedded to have forward compatible implementations.
type UnimplementedComplianceScanScheduleServiceServer struct {
}

func (*UnimplementedComplianceScanScheduleServiceServer) ListComplianceScanConfigurations(ctx context.Context, req *Empty) (*ListComplianceScanConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComplianceScanConfigurations not implemented")
}
func (*UnimplementedComplianceScanScheduleServiceServer) GetComplianceScanConfiguration(ctx context.Context, req *ComplianceScanConfigurationRequest) (*ComplianceScanConfigurationStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComplianceScanConfiguration not implemented")
}
func (*UnimplementedComplianceScanScheduleServiceServer) PostComplianceScanConfiguration(ctx context.Context, req *ComplianceScanConfiguration) (*ComplianceScanConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostComplianceScanConfiguration not implemented")
}
func (*UnimplementedComplianceScanScheduleServiceServer) UpdateComplianceScanConfiguration(ctx context.Context, req *ComplianceScanConfiguration) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComplianceScanConfiguration not implemented")
}
func (*UnimplementedComplianceScanScheduleServiceServer) DeleteComplianceScanConfiguration(ctx context.Context, req *ComplianceScanConfigurationRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComplianceScanConfiguration not implemented")
}
func (*UnimplementedComplianceScanScheduleServiceServer) RunComplianceScanConfiguration(ctx context.Context, req *ComplianceScanConfigurationRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunComplianceScanConfiguration not implemented")
}

func RegisterComplianceScanScheduleServiceServer(s *grpc.Server, srv ComplianceScanScheduleServiceServer) {
	s.RegisterService(&_ComplianceScanScheduleService_serviceDesc, srv)
}

func _ComplianceScanScheduleService_ListComplianceScanConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceScanScheduleServiceServer).ListComplianceScanConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ComplianceScanScheduleService/ListComplianceScanConfigurations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceScanScheduleServiceServer).ListComplianceScanConfigurations(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceScanScheduleService_GetComplianceScanConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComplianceScanConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceScanScheduleServiceServer).GetComplianceScanConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ComplianceScanScheduleService/GetComplianceScanConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceScanScheduleServiceServer).GetComplianceScanConfiguration(ctx, req.(*ComplianceScanConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceScanScheduleService_PostComplianceScanConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComplianceScanConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceScanScheduleServiceServer).PostComplianceScanConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ComplianceScanScheduleService/PostComplianceScanConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceScanScheduleServiceServer).PostComplianceScanConfiguration(ctx, req.(*ComplianceScanConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceScanScheduleService_UpdateComplianceScanConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComplianceScanConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceScanScheduleServiceServer).UpdateComplianceScanConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ComplianceScanScheduleService/UpdateComplianceScanConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceScanScheduleServiceServer).UpdateComplianceScanConfiguration(ctx, req.(*ComplianceScanConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceScanScheduleService_DeleteComplianceScanConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComplianceScanConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceScanScheduleServiceServer).DeleteComplianceScanConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ComplianceScanScheduleService/DeleteComplianceScanConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceScanScheduleServiceServer).DeleteComplianceScanConfiguration(ctx, req.(*ComplianceScanConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceScanScheduleService_RunComplianceScanConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComplianceScanConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceScanScheduleServiceServer).RunComplianceScanConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ComplianceScanScheduleService/RunComplianceScanConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceScanScheduleServiceServer).RunComplianceScanConfiguration(ctx, req.(*ComplianceScanConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ComplianceScanScheduleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v2.ComplianceScanScheduleService",
	HandlerType: (*ComplianceScanScheduleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListComplianceScanConfigurations",
			Handler:    _ComplianceScanScheduleService_ListComplianceScanConfigurations_Handler,
		},
		{
			MethodName: "GetComplianceScanConfiguration",
			Handler:    _ComplianceScanScheduleService_GetComplianceScanConfiguration_Handler,
		},
		{
			MethodName: "PostComplianceScanConfiguration",
			Handler:    _ComplianceScanScheduleService_PostComplianceScanConfiguration_Handler,
		},
		{
			MethodName: "UpdateComplianceScanConfiguration",
			Handler:    _ComplianceScanScheduleService_UpdateComplianceScanConfiguration_Handler,
		},
		{
			MethodName: "DeleteComplianceScanConfiguration",
			Handler:    _ComplianceScanScheduleService_DeleteComplianceScanConfiguration_Handler,
		},
		{
			MethodName: "RunComplianceScanConfiguration",
			Handler:    _ComplianceScanScheduleService_RunComplianceScanConfiguration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v2/compliance_scan_configuration_service.proto",
}

func (m *ClusterScanStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterScanStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterScanStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Errors) > 0 {
		for iNdEx := len(m.Errors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Errors[iNdEx])
			copy(dAtA[i:], m.Errors[iNdEx])
			i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(len(m.Errors[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BaseComplianceScanScheduleSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseComplianceScanScheduleSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseComplianceScanScheduleSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Schedule != nil {
		{
			size, err := m.Schedule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Profiles) > 0 {
		for iNdEx := len(m.Profiles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Profiles[iNdEx])
			copy(dAtA[i:], m.Profiles[iNdEx])
			i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(len(m.Profiles[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.OneTimeScan {
		i--
		if m.OneTimeScan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceScanConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceScanConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceScanConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Clusters) > 0 {
		for iNdEx := len(m.Clusters) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Clusters[iNdEx])
			copy(dAtA[i:], m.Clusters[iNdEx])
			i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(len(m.Clusters[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ScanScheduleConfig != nil {
		{
			size, err := m.ScanScheduleConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ScanName) > 0 {
		i -= len(m.ScanName)
		copy(dAtA[i:], m.ScanName)
		i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(len(m.ScanName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceScanConfigurationStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceScanConfigurationStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceScanConfigurationStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreatedBy != nil {
		{
			size, err := m.CreatedBy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.LastUpdatedTime != nil {
		{
			size, err := m.LastUpdatedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.CreatedTime != nil {
		{
			size, err := m.CreatedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Clusters) > 0 {
		for iNdEx := len(m.Clusters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Clusters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ScanScheduleConfig != nil {
		{
			size, err := m.ScanScheduleConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ScanName) > 0 {
		i -= len(m.ScanName)
		copy(dAtA[i:], m.ScanName)
		i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(len(m.ScanName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComplianceScanConfigurationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceScanConfigurationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceScanConfigurationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ScanName) > 0 {
		i -= len(m.ScanName)
		copy(dAtA[i:], m.ScanName)
		i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(len(m.ScanName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListComplianceScanConfigurationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListComplianceScanConfigurationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListComplianceScanConfigurationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Schedules) > 0 {
		for iNdEx := len(m.Schedules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Schedules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComplianceScanConfigurationService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintComplianceScanConfigurationService(dAtA []byte, offset int, v uint64) int {
	offset -= sovComplianceScanConfigurationService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClusterScanStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			l = len(s)
			n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BaseComplianceScanScheduleSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OneTimeScan {
		n += 2
	}
	if len(m.Profiles) > 0 {
		for _, s := range m.Profiles {
			l = len(s)
			n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
		}
	}
	if m.Schedule != nil {
		l = m.Schedule.Size()
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceScanConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScanName)
	if l > 0 {
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	if m.ScanScheduleConfig != nil {
		l = m.ScanScheduleConfig.Size()
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	if len(m.Clusters) > 0 {
		for _, s := range m.Clusters {
			l = len(s)
			n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceScanConfigurationStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScanName)
	if l > 0 {
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	if m.ScanScheduleConfig != nil {
		l = m.ScanScheduleConfig.Size()
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	if len(m.Clusters) > 0 {
		for _, e := range m.Clusters {
			l = e.Size()
			n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
		}
	}
	if m.CreatedTime != nil {
		l = m.CreatedTime.Size()
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	if m.LastUpdatedTime != nil {
		l = m.LastUpdatedTime.Size()
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	if m.CreatedBy != nil {
		l = m.CreatedBy.Size()
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComplianceScanConfigurationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScanName)
	if l > 0 {
		n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListComplianceScanConfigurationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Schedules) > 0 {
		for _, e := range m.Schedules {
			l = e.Size()
			n += 1 + l + sovComplianceScanConfigurationService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovComplianceScanConfigurationService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozComplianceScanConfigurationService(x uint64) (n int) {
	return sovComplianceScanConfigurationService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClusterScanStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceScanConfigurationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterScanStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterScanStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceScanConfigurationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseComplianceScanScheduleSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceScanConfigurationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseComplianceScanScheduleSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseComplianceScanScheduleSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneTimeScan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OneTimeScan = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profiles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profiles = append(m.Profiles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Schedule == nil {
				m.Schedule = &Schedule{}
			}
			if err := m.Schedule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceScanConfigurationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceScanConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceScanConfigurationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceScanConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceScanConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScanName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanScheduleConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScanScheduleConfig == nil {
				m.ScanScheduleConfig = &BaseComplianceScanScheduleSettings{}
			}
			if err := m.ScanScheduleConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clusters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clusters = append(m.Clusters, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceScanConfigurationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceScanConfigurationStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceScanConfigurationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceScanConfigurationStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceScanConfigurationStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScanName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanScheduleConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScanScheduleConfig == nil {
				m.ScanScheduleConfig = &BaseComplianceScanScheduleSettings{}
			}
			if err := m.ScanScheduleConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clusters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clusters = append(m.Clusters, &ClusterScanStatus{})
			if err := m.Clusters[len(m.Clusters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedTime == nil {
				m.CreatedTime = &types.Timestamp{}
			}
			if err := m.CreatedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdatedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastUpdatedTime == nil {
				m.LastUpdatedTime = &types.Timestamp{}
			}
			if err := m.LastUpdatedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedBy == nil {
				m.CreatedBy = &SlimUser{}
			}
			if err := m.CreatedBy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceScanConfigurationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplianceScanConfigurationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceScanConfigurationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceScanConfigurationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceScanConfigurationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScanName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceScanConfigurationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListComplianceScanConfigurationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceScanConfigurationService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListComplianceScanConfigurationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListComplianceScanConfigurationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schedules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schedules = append(m.Schedules, &ComplianceScanConfigurationStatus{})
			if err := m.Schedules[len(m.Schedules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceScanConfigurationService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceScanConfigurationService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipComplianceScanConfigurationService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowComplianceScanConfigurationService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComplianceScanConfigurationService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthComplianceScanConfigurationService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupComplianceScanConfigurationService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthComplianceScanConfigurationService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthComplianceScanConfigurationService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowComplianceScanConfigurationService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupComplianceScanConfigurationService = fmt.Errorf("proto: unexpected end of group")
)
