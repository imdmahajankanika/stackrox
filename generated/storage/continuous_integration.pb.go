// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/continuous_integration.proto

package storage

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ContinuousIntegrationType int32

const (
	ContinuousIntegrationType_UNSUPPORTED_CONTINUOUS_INTEGRATION ContinuousIntegrationType = 0
	ContinuousIntegrationType_GITHUB_ACTIONS                     ContinuousIntegrationType = 1
)

var ContinuousIntegrationType_name = map[int32]string{
	0: "UNSUPPORTED_CONTINUOUS_INTEGRATION",
	1: "GITHUB_ACTIONS",
}

var ContinuousIntegrationType_value = map[string]int32{
	"UNSUPPORTED_CONTINUOUS_INTEGRATION": 0,
	"GITHUB_ACTIONS":                     1,
}

func (x ContinuousIntegrationType) String() string {
	return proto.EnumName(ContinuousIntegrationType_name, int32(x))
}

func (ContinuousIntegrationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_46cf25d90182d3bd, []int{0}
}

type RoleMapping_Claim int32

const (
	RoleMapping_SUB RoleMapping_Claim = 0
)

var RoleMapping_Claim_name = map[int32]string{
	0: "SUB",
}

var RoleMapping_Claim_value = map[string]int32{
	"SUB": 0,
}

func (x RoleMapping_Claim) String() string {
	return proto.EnumName(RoleMapping_Claim_name, int32(x))
}

func (RoleMapping_Claim) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_46cf25d90182d3bd, []int{1, 0}
}

// TODO(dhaus): WIP name, need to find a better one for all of this.
// ContinuousIntegrationConfig provides configuration with CI of different providers.
// Specifically, this allows integration with different providers (i.e. GitHub and GitLab) for
// allowing to receive an access token with a specific role based on the id_token within the respective
// CI solution.
type ContinuousIntegrationConfig struct {
	Id                   string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" sql:"pk,type(uuid)"`
	Type                 ContinuousIntegrationType `protobuf:"varint,2,opt,name=type,proto3,enum=storage.ContinuousIntegrationType" json:"type,omitempty"`
	Mappings             []*RoleMapping            `protobuf:"bytes,3,rep,name=mappings,proto3" json:"mappings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ContinuousIntegrationConfig) Reset()         { *m = ContinuousIntegrationConfig{} }
func (m *ContinuousIntegrationConfig) String() string { return proto.CompactTextString(m) }
func (*ContinuousIntegrationConfig) ProtoMessage()    {}
func (*ContinuousIntegrationConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_46cf25d90182d3bd, []int{0}
}
func (m *ContinuousIntegrationConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContinuousIntegrationConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContinuousIntegrationConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContinuousIntegrationConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContinuousIntegrationConfig.Merge(m, src)
}
func (m *ContinuousIntegrationConfig) XXX_Size() int {
	return m.Size()
}
func (m *ContinuousIntegrationConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ContinuousIntegrationConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ContinuousIntegrationConfig proto.InternalMessageInfo

func (m *ContinuousIntegrationConfig) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ContinuousIntegrationConfig) GetType() ContinuousIntegrationType {
	if m != nil {
		return m.Type
	}
	return ContinuousIntegrationType_UNSUPPORTED_CONTINUOUS_INTEGRATION
}

func (m *ContinuousIntegrationConfig) GetMappings() []*RoleMapping {
	if m != nil {
		return m.Mappings
	}
	return nil
}

func (m *ContinuousIntegrationConfig) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ContinuousIntegrationConfig) Clone() *ContinuousIntegrationConfig {
	if m == nil {
		return nil
	}
	cloned := new(ContinuousIntegrationConfig)
	*cloned = *m

	if m.Mappings != nil {
		cloned.Mappings = make([]*RoleMapping, len(m.Mappings))
		for idx, v := range m.Mappings {
			cloned.Mappings[idx] = v.Clone()
		}
	}
	return cloned
}

// RoleMapping holds the mapping based on a specific claim on the id_token from the CI provider to a specific
// role.
// Currently, the supported claims are:
// * "sub"
type RoleMapping struct {
	Claim                RoleMapping_Claim `protobuf:"varint,1,opt,name=claim,proto3,enum=storage.RoleMapping_Claim" json:"claim,omitempty"`
	Value                string            `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Role                 string            `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RoleMapping) Reset()         { *m = RoleMapping{} }
func (m *RoleMapping) String() string { return proto.CompactTextString(m) }
func (*RoleMapping) ProtoMessage()    {}
func (*RoleMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_46cf25d90182d3bd, []int{1}
}
func (m *RoleMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoleMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoleMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoleMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleMapping.Merge(m, src)
}
func (m *RoleMapping) XXX_Size() int {
	return m.Size()
}
func (m *RoleMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleMapping.DiscardUnknown(m)
}

var xxx_messageInfo_RoleMapping proto.InternalMessageInfo

func (m *RoleMapping) GetClaim() RoleMapping_Claim {
	if m != nil {
		return m.Claim
	}
	return RoleMapping_SUB
}

func (m *RoleMapping) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *RoleMapping) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *RoleMapping) MessageClone() proto.Message {
	return m.Clone()
}
func (m *RoleMapping) Clone() *RoleMapping {
	if m == nil {
		return nil
	}
	cloned := new(RoleMapping)
	*cloned = *m

	return cloned
}

func init() {
	proto.RegisterEnum("storage.ContinuousIntegrationType", ContinuousIntegrationType_name, ContinuousIntegrationType_value)
	proto.RegisterEnum("storage.RoleMapping_Claim", RoleMapping_Claim_name, RoleMapping_Claim_value)
	proto.RegisterType((*ContinuousIntegrationConfig)(nil), "storage.ContinuousIntegrationConfig")
	proto.RegisterType((*RoleMapping)(nil), "storage.RoleMapping")
}

func init() {
	proto.RegisterFile("storage/continuous_integration.proto", fileDescriptor_46cf25d90182d3bd)
}

var fileDescriptor_46cf25d90182d3bd = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x29, 0x2e, 0xc9, 0x2f,
	0x4a, 0x4c, 0x4f, 0xd5, 0x4f, 0xce, 0xcf, 0x2b, 0xc9, 0xcc, 0x2b, 0xcd, 0x2f, 0x2d, 0x8e, 0xcf,
	0xcc, 0x2b, 0x49, 0x4d, 0x2f, 0x4a, 0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x62, 0x87, 0xaa, 0x92, 0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0x8b, 0xe9, 0x83, 0x58, 0x10,
	0x69, 0xa5, 0x0d, 0x8c, 0x5c, 0xd2, 0xce, 0x70, 0xfd, 0x9e, 0x08, 0xed, 0xce, 0xf9, 0x79, 0x69,
	0x99, 0xe9, 0x42, 0xea, 0x5c, 0x4c, 0x99, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x4e, 0xe2,
	0x9f, 0xee, 0xc9, 0x0b, 0x17, 0x17, 0xe6, 0x58, 0x29, 0x15, 0x64, 0xeb, 0x94, 0x54, 0x16, 0xa4,
	0x6a, 0x94, 0x96, 0x66, 0xa6, 0x68, 0x2a, 0x05, 0x31, 0x65, 0xa6, 0x08, 0x99, 0x71, 0xb1, 0x80,
	0x84, 0x24, 0x98, 0x14, 0x18, 0x35, 0xf8, 0x8c, 0x94, 0xf4, 0xa0, 0xd6, 0xea, 0x61, 0x35, 0x3c,
	0xa4, 0xb2, 0x20, 0x35, 0x08, 0xac, 0x5e, 0xc8, 0x80, 0x8b, 0x23, 0x37, 0xb1, 0xa0, 0x20, 0x33,
	0x2f, 0xbd, 0x58, 0x82, 0x59, 0x81, 0x59, 0x83, 0xdb, 0x48, 0x04, 0xae, 0x37, 0x28, 0x3f, 0x27,
	0xd5, 0x17, 0x22, 0x19, 0x04, 0x57, 0xa5, 0x54, 0xcd, 0xc5, 0x8d, 0x24, 0x21, 0x64, 0xc0, 0xc5,
	0x9a, 0x9c, 0x93, 0x98, 0x99, 0x0b, 0x76, 0x24, 0x9f, 0x91, 0x14, 0x36, 0xdd, 0x7a, 0xce, 0x20,
	0x15, 0x41, 0x10, 0x85, 0x42, 0x22, 0x5c, 0xac, 0x65, 0x89, 0x39, 0xa5, 0x10, 0xb7, 0x72, 0x06,
	0x41, 0x38, 0x42, 0x42, 0x5c, 0x2c, 0x45, 0xf9, 0x39, 0xa9, 0x12, 0xcc, 0x60, 0x41, 0x30, 0x5b,
	0x49, 0x80, 0x8b, 0x15, 0xac, 0x53, 0x88, 0x9d, 0x8b, 0x39, 0x38, 0xd4, 0x49, 0x80, 0x41, 0x2b,
	0x9c, 0x4b, 0x12, 0xa7, 0x8f, 0x84, 0xd4, 0xb8, 0x94, 0x42, 0xfd, 0x82, 0x43, 0x03, 0x02, 0xfc,
	0x83, 0x42, 0x5c, 0x5d, 0xe2, 0x9d, 0xfd, 0xfd, 0x42, 0x3c, 0xfd, 0x42, 0xfd, 0x43, 0x83, 0xe3,
	0x3d, 0xfd, 0x42, 0x5c, 0xdd, 0x83, 0x1c, 0x43, 0x3c, 0xfd, 0xfd, 0x04, 0x18, 0x84, 0x84, 0xb8,
	0xf8, 0xdc, 0x3d, 0x43, 0x3c, 0x42, 0x9d, 0xe2, 0x1d, 0x9d, 0x41, 0x42, 0xc1, 0x02, 0x8c, 0x4e,
	0x26, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x8c, 0xc7,
	0x72, 0x0c, 0x5c, 0x92, 0x99, 0xf9, 0x7a, 0xc5, 0x25, 0x89, 0xc9, 0xd9, 0x45, 0xf9, 0x15, 0x90,
	0xd8, 0x82, 0x79, 0x2d, 0x0a, 0x16, 0xa9, 0x49, 0x6c, 0x60, 0x71, 0x63, 0x40, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x9f, 0x9e, 0x43, 0xc8, 0x0c, 0x02, 0x00, 0x00,
}

func (m *ContinuousIntegrationConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContinuousIntegrationConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContinuousIntegrationConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Mappings) > 0 {
		for iNdEx := len(m.Mappings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mappings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContinuousIntegration(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Type != 0 {
		i = encodeVarintContinuousIntegration(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintContinuousIntegration(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoleMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoleMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Role) > 0 {
		i -= len(m.Role)
		copy(dAtA[i:], m.Role)
		i = encodeVarintContinuousIntegration(dAtA, i, uint64(len(m.Role)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintContinuousIntegration(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Claim != 0 {
		i = encodeVarintContinuousIntegration(dAtA, i, uint64(m.Claim))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintContinuousIntegration(dAtA []byte, offset int, v uint64) int {
	offset -= sovContinuousIntegration(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ContinuousIntegrationConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovContinuousIntegration(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovContinuousIntegration(uint64(m.Type))
	}
	if len(m.Mappings) > 0 {
		for _, e := range m.Mappings {
			l = e.Size()
			n += 1 + l + sovContinuousIntegration(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoleMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Claim != 0 {
		n += 1 + sovContinuousIntegration(uint64(m.Claim))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovContinuousIntegration(uint64(l))
	}
	l = len(m.Role)
	if l > 0 {
		n += 1 + l + sovContinuousIntegration(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovContinuousIntegration(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozContinuousIntegration(x uint64) (n int) {
	return sovContinuousIntegration(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ContinuousIntegrationConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContinuousIntegration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContinuousIntegrationConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContinuousIntegrationConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContinuousIntegration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContinuousIntegration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContinuousIntegration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContinuousIntegration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ContinuousIntegrationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mappings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContinuousIntegration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContinuousIntegration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContinuousIntegration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mappings = append(m.Mappings, &RoleMapping{})
			if err := m.Mappings[len(m.Mappings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContinuousIntegration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContinuousIntegration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContinuousIntegration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claim", wireType)
			}
			m.Claim = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContinuousIntegration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Claim |= RoleMapping_Claim(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContinuousIntegration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContinuousIntegration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContinuousIntegration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContinuousIntegration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContinuousIntegration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContinuousIntegration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContinuousIntegration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContinuousIntegration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContinuousIntegration(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContinuousIntegration
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContinuousIntegration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContinuousIntegration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthContinuousIntegration
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupContinuousIntegration
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthContinuousIntegration
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthContinuousIntegration        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContinuousIntegration          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupContinuousIntegration = fmt.Errorf("proto: unexpected end of group")
)
