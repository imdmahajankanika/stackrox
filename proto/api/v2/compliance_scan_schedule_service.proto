syntax = "proto3";

option go_package = "v2";
option java_package = "io.stackrox.proto.api.v2";

import "google/protobuf/timestamp.proto";
import weak "google/api/annotations.proto";
import "api/v2/common.proto";
import "api/v2/user.proto";

package v2;

// Represents the role of the node within the cluster
enum NodeRole {
    INFRA = 0;
    WORKER = 1;
    MASTER = 2;
}

// ClusterScanStatus holds status based on cluster in the event that a schedule was
// successfully applied to some clusters but not others.
message ClusterScanStatus {
    string                    cluster_id = 1;
    repeated string           errors = 2;
}

message BaseComplianceScanScheduleSettings {
    bool                          auto_apply_remediations = 1;
    bool                          auto_update_remediations = 2;
    bool                          one_time_scan = 3;
    repeated string               profiles = 4;
    Schedule              schedule = 5;
    repeated NodeRole             node_roles = 6;
}

message ComplianceScanScheduleConfiguration {
    string                        scan_name = 1;
    BaseComplianceScanScheduleSettings    scan_schedule_config = 2;
    repeated string clusters = 3;
}

message ComplianceScanScheduleStatus {
    string                        scan_name = 1;
    BaseComplianceScanScheduleSettings    scan_schedule_config = 2;
    repeated ClusterScanStatus    clusters = 3;
    google.protobuf.Timestamp     created_time = 4;
    google.protobuf.Timestamp     last_updated_time = 5;
    // Most recent user to update the scan settings
    SlimUser                      created_by = 6;
}

message ComplianceScanScheduleConfigRequest {
    string scan_name = 1;
}

message ListComplianceScanScheduleResponse {
    repeated ComplianceScanScheduleStatus schedules = 1;
}

service ComplianceScanScheduleService {
    // ListComplianceScanSchedules lists all the compliance operator schedules for the secured clusters
    rpc ListComplianceScanSchedules (Empty) returns (ListComplianceScanScheduleResponse) {
        option (google.api.http) = {
            get: "/v2/compliance/scan/schedules"
        };
    }

    // GetComplianceScanSchedule retrieves the specified compliance scan schedule
    rpc GetComplianceScanSchedule (ComplianceScanScheduleConfigRequest) returns (ComplianceScanScheduleStatus) {
        option (google.api.http) = {
            get: "/v2/compliance/scan/schedules/{scan_name}"
        };
    }

    // PostComplianceScanSchedule creates a compliance scan schedule configuration
    rpc PostComplianceScanSchedule (ComplianceScanScheduleConfiguration) returns (ComplianceScanScheduleConfiguration) {
        option (google.api.http) = {
            post: "/v2/compliance/scan/schedules"
            body: "*"
        };
    }

    // UpdateComplianceScanSchedule updates a compliance scan schedule configuration
    rpc UpdateComplianceScanSchedule (ComplianceScanScheduleConfiguration) returns (Empty) {
        option (google.api.http) = {
            put: "/v2/compliance/scan/schedules/{scan_name}"
            body: "*"
        };
    }

    // DeleteComplianceScanSchedule removes the compliance scan schedule with given Name
    rpc DeleteComplianceScanSchedule (ComplianceScanScheduleConfigRequest) returns (Empty) {
        option (google.api.http) = {
            delete: "/v2/compliance/scan/schedules/{scan_name}"
        };
    }

    // RunComplianceScanSchedule launches scan for the specified schedule
    rpc RunComplianceScanSchedule (ComplianceScanScheduleConfigRequest) returns (Empty) {
        option (google.api.http) = {
            get: "/v2/compliance/scan/schedules/execute/{scan_name}"
        };
    }
}
